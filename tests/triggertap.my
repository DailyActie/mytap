BEGIN;
SELECT tap.plan(39);

use tap;

DROP TRIGGER IF EXISTS tap.testtrigger;

CREATE TRIGGER `testtrigger`
BEFORE INSERT ON tap.__tcache__
FOR EACH ROW set @tmp := 1;

/****************************************************************************/
-- Test has_trigger().

SELECT tap.check_test(
    tap.has_trigger( 'tap', '__SDFSDFD__', '', '' ),
    0,
    'tap.has_trigger(non-existent table)',
    'Error #     Table tap.__SDFSDFD__ does not exist',
    '',
    0
);

SELECT tap.check_test(
    tap.has_trigger('__SDFSDFD__', 'lol', '', '' ),
    0,
    'tap.has_trigger(non-existent schema, tab)',
    'Error #     Table __SDFSDFD__.lol does not exist',
    '',
    0
);

SELECT tap.check_test(
    tap.has_trigger( 'tap', '__tcache__', 'testtrigger', '' ),
    1,
    'tap.has_trigger(sch, tab, trig)',
    'Trigger tap.__tcache__.testtrigger should exist',
    '',
    0
);

SELECT tap.check_test(
    tap.has_trigger( 'tap', '__tcache__', 'othertrigger', '' ),
    0,
    'tap.has_trigger(sch, tab, non-existent trigger)',
    'Trigger tap.__tcache__.othertrigger should exist',
    '',
    0
);

SELECT tap.check_test(
    tap.has_trigger( 'tap', '__tcache__', 'testtrigger', 'my own description'),
    1,
    'tap.has_trigger(sch, tab, trig, descr)',
    'my own description',
    '',
    0
);

create or replace view tap.myview as select 1;

SELECT tap.check_test(
    tap.has_trigger( 'tap', 'myview', 'testtrigger', 'a view is no table' ),
    0,
    'tap.has_trigger(sch, view, descr)',
    'Error #     Table tap.myview does not exist',
    '',
    0
);

drop view tap.myview;

/****************************************************************************/
-- Test hasnt_trigger().

SELECT tap.check_test(
    tap.hasnt_trigger( 'tap', '__SDFSDFD__', '', '' ),
    0,
    'tap.hasnt_trigger(non-existent table)',
    'Error #     Table tap.__SDFSDFD__ does not exist',
    '',
    0
);

SELECT tap.check_test(
    tap.hasnt_trigger( '__SDFSDFD__', 'lol', '', '' ),
    0,
    'tap.hasnt_trigger(non-existent schema, tab)',
    'Error #     Table __SDFSDFD__.lol does not exist',
    '',
    0
);

SELECT tap.check_test(
    tap.hasnt_trigger( 'tap', '__tcache__', '', '' ),
    1,
    'tap.hasnt_trigger(sch, tab, empty trig)',
    'Trigger tap.__tcache__. should not exist',
    '',
    0
);

SELECT tap.check_test(
    tap.hasnt_trigger( 'tap', '__tcache__', 'testtrigger', '' ),
    0,
    'tap.hasnt_trigger(sch, tab, trig)',
    'Trigger tap.__tcache__.testtrigger should not exist',
    '',
    0
);

SELECT tap.check_test(
    tap.hasnt_trigger( 'tap', '__tcache__', '', 'my own description'),
    1,
    'tap.hasnt_trigger(sch, tab, empty trig, descr)',
    'my own description',
    '',
    0
);

SELECT tap.check_test(
    tap.hasnt_trigger( 'tap', '__tcache__', 'othertrigger', 'my own description'),
    1,
    'tap.hasnt_trigger(sch, tab, trig, descr)',
    'my own description',
    '',
    0
);

create or replace view tap.myview as select 1;

SELECT tap.check_test(
    tap.hasnt_trigger( 'tap', 'myview', 'testtrigger', 'a view is no table' ),
    0,
    'tap.hasnt_trigger(sch, view, descr)',
    'Error #     Table tap.myview does not exist',
    '',
    0
);

drop view tap.myview;

/****************************************************************************/
-- Finish the tests and clean up.
CALL tap.finish();
ROLLBACK;
